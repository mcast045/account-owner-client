{"version":3,"sources":["components/Modals/SuccessfulModal/SuccessfulModal.js","components/Modals/ErrorModal/ErrorModal.js","UI/Input/Input.js","Utility/FormUtility.js","Utility/InputConfiguration.js","containers/Owner/UpdateOwner/UpdateOwner.js"],"names":["successModal","props","show","backdrop","Header","modalHeaderText","Body","modalBodyText","Footer","bsStyle","onClick","successClick","okButtonText","errorModal","closeModal","Input","inputField","errorMessage","invalid","shouldValidate","touched","elementType","controlId","id","componentClass","ControlLabel","sm","label","type","value","onChange","changed","onBlur","blur","selected","dateFormat","readOnly","className","showYearDropdown","dropdownMode","convertStateToArrayOfFormObjects","formObject","formElementsArray","key","push","config","executeValidationAndReturnFormElement","event","updatedOwnerForm","formElement","target","validationResponse","validation","validationObject","isValid","required","trim","maxLength","length","checkValidity","valid","countInvalidElements","ownerForm","element","returnInputConfiguration","name","address","dateOfBirth","moment","UpdateOwner","state","isFormValid","componentWillMount","setState","componentDidMount","url","match","params","onGetOwnerById","componentWillReceiveProps","nextProps","nameObject","dateObject","addressObject","data","handleChangeEvent","formUtilityActions","counter","redirectToOwnerList","history","updateOwner","preventDefault","ownerToUpdate","onUpdateOwner","this","horizontal","onSubmit","map","mdOffset","md","disabled","showSuccessModal","onCloseSuccessModal","showErrorModal","onCloseErrorModal","Component","connect","repository","errorHandler","dispatch","repositoryActions","owner","errorHandlerActions"],"mappings":"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","file":"static/js/5.16d91f1b.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport '../ModalStyles.css';\r\n\r\nconst successModal = (props) => {\r\n    return (\r\n        <Fragment>\r\n            <Modal show={props.show} backdrop='static'>\r\n                <Modal.Header>\r\n                    {props.modalHeaderText}\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <p>{props.modalBodyText}</p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button bsStyle=\"success\" onClick={props.successClick}>{props.okButtonText}</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default successModal;","import React, { Fragment } from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport '../ModalStyles.css';\r\n\r\nconst errorModal = (props) => {\r\n    return (\r\n        <Fragment>\r\n            <Modal show={props.show} backdrop='static'>\r\n                <Modal.Header>\r\n                    {props.modalHeaderText}\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <p>{props.modalBodyText}</p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button bsStyle=\"danger\" onClick={props.closeModal}>{props.okButtonText}</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default errorModal;","import React, { Fragment } from 'react';\r\nimport { FormGroup, Col, FormControl, ControlLabel } from 'react-bootstrap';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport './Input.css';\r\n\r\nconst Input = (props) => {\r\n    let inputField = null;\r\n    let errorMessage = null;\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        errorMessage = (<em>{props.errorMessage}</em>);\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case 'input':\r\n            inputField = (\r\n                <FormGroup controlId={props.id}>\r\n                    <Col componentClass={ControlLabel} sm={2}>\r\n                        {props.label}\r\n                    </Col>\r\n                    <Col sm={6}>\r\n                        <FormControl type={props.type} value={props.value} onChange={props.changed} onBlur={props.blur} />\r\n                    </Col>\r\n                    <Col>\r\n                        <em>{errorMessage}</em>\r\n                    </Col>\r\n                </FormGroup>\r\n            )\r\n            break;\r\n        case 'datePicker':\r\n            inputField = (\r\n                <FormGroup controlId={props.id}>\r\n                    <Col componentClass={ControlLabel} sm={2}>\r\n                        {props.label}\r\n                    </Col>\r\n                    <Col sm={6}>\r\n                        <DatePicker selected={props.value} dateFormat=\"MM/DD/YYYY\" readOnly\r\n                            onChange={props.changed} className='datePickerControl'\r\n                            showYearDropdown dropdownMode=\"select\" />\r\n                    </Col>\r\n                    <Col>\r\n                        <em>{errorMessage}</em>\r\n                    </Col>\r\n                </FormGroup>\r\n            )\r\n            break;\r\n        default: inputField = null;\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {inputField}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Input;","export const convertStateToArrayOfFormObjects = (formObject) => {\r\n    const formElementsArray = [];\r\n    for (let key in formObject) {\r\n        formElementsArray.push({\r\n            id: key,\r\n            config: formObject[key]\r\n        });\r\n    }\r\n\r\n    return formElementsArray;\r\n}\r\n\r\nconst checkValidity = (value, validation) => {\r\n    let validationObject = {\r\n        isValid: true,\r\n        errorMessage: ''\r\n    };\r\n\r\n    if (validation) {\r\n        if (validation.required) {\r\n            validationObject.isValid = value.trim() !== '';\r\n            validationObject.errorMessage = validationObject.isValid ? '' : 'Field is required';\r\n        }\r\n\r\n        if (validationObject.isValid && validation.maxLength) {\r\n            validationObject.isValid = value.length <= validation.maxLength;\r\n            validationObject.errorMessage =  validationObject.isValid ? '' : `Not allowed more than ${validation.maxLength} characters`;\r\n        }\r\n\r\n        return validationObject;\r\n    }\r\n    else {\r\n        return validationObject;\r\n    }\r\n}\r\n\r\nexport const executeValidationAndReturnFormElement = (event, updatedOwnerForm, id) => {\r\n    let formElement = { ...updatedOwnerForm[id] };\r\n    formElement.value = id === 'dateOfBirth' ? event : event.target.value;\r\n    formElement.touched = true;\r\n\r\n    const validationResponse = checkValidity(formElement.value, formElement.validation);\r\n\r\n    formElement.valid = validationResponse.isValid;\r\n    formElement.errorMessage = validationResponse.errorMessage;\r\n\r\n    return formElement;\r\n}\r\n\r\nexport const countInvalidElements = (ownerForm) => {\r\n    let countInvalidElements = 0;\r\n    for (let element in ownerForm) {\r\n        if (!ownerForm[element].valid) {\r\n            countInvalidElements = countInvalidElements + 1;\r\n            break;\r\n        }\r\n    }\r\n    return countInvalidElements;\r\n}","import moment from 'moment';\r\n\r\nexport const returnInputConfiguration = () => {\r\n    return {\r\n        name: {\r\n            element: 'input', type: 'text', value: '',\r\n            validation: { required: true }, valid: false, touched: false,\r\n            errorMessage: '', label: 'Name:'\r\n        },\r\n        address: {\r\n            element: 'input', type: 'text', value: '',\r\n            validation: { required: true, maxLength: 60 }, valid: false, touched: false,\r\n            errorMessage: '', label: 'Address:'\r\n        },\r\n        dateOfBirth: {\r\n            element: 'datePicker', type: 'text', value: moment(),\r\n            valid: true, touched: false,\r\n            errorMessage: '', label: 'Date of birth:'\r\n        }\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Form, Well, Button, FormGroup, Col } from 'react-bootstrap';\r\nimport { returnInputConfiguration } from '../../../Utility/InputConfiguration';\r\nimport * as formUtilityActions from '../../../Utility/FormUtility';\r\nimport Input from '../../../UI/Input/Input';\r\nimport * as repositoryActions from '../../../Store/actions/repositoryActions';\r\nimport * as errorHandlerActions from '../../../Store/actions/errorHandlerActions';\r\nimport { connect } from 'react-redux';\r\nimport SuccessModal from '../../../components/Modals/SuccessfulModal/SuccessfulModal';\r\nimport ErrorModal from '../../../components/Modals/ErrorModal/ErrorModal';\r\nimport moment from 'moment';\r\n\r\nclass UpdateOwner extends Component {\r\n    state = {\r\n        ownerForm: {},\r\n        isFormValid: true\r\n    }\r\n\r\n    componentWillMount = () => {\r\n        this.setState({ ownerForm: returnInputConfiguration() });\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        let id = this.props.match.params.id;\r\n        let url = '/api/owner/' + id;\r\n        this.props.onGetOwnerById(url, {...this.props});\r\n    }\r\n\r\n    componentWillReceiveProps = (nextProps) => {\r\n        const updatedOwnerForm = { ...this.state.ownerForm };\r\n        let nameObject = { ...updatedOwnerForm.name };\r\n        let dateObject = { ...updatedOwnerForm.dateOfBirth };\r\n        let addressObject = { ...updatedOwnerForm.address };\r\n     \r\n        nameObject.value = nextProps.data.name;\r\n        nameObject.valid = true;\r\n        dateObject.value = moment(nextProps.data.dateOfBirth);\r\n        addressObject.value = nextProps.data.address;\r\n        addressObject.valid = true;\r\n     \r\n        updatedOwnerForm['name'] = nameObject;\r\n        updatedOwnerForm['dateOfBirth'] = dateObject;\r\n        updatedOwnerForm['address'] = addressObject;\r\n        this.setState({ ownerForm: updatedOwnerForm });\r\n    }\r\n\r\n    handleChangeEvent = (event, id) => {\r\n        const updatedOwnerForm = { ...this.state.ownerForm };\r\n        updatedOwnerForm[id] = formUtilityActions.executeValidationAndReturnFormElement(event, updatedOwnerForm, id);\r\n        const counter = formUtilityActions.countInvalidElements(updatedOwnerForm);\r\n\r\n        this.setState({ ownerForm: updatedOwnerForm, isFormValid: counter === 0 })\r\n    }\r\n\r\n    redirectToOwnerList = () => {\r\n        this.props.history.push('/owner-list');\r\n    }\r\n\r\n    updateOwner = (event) => {\r\n        event.preventDefault();\r\n\r\n        const ownerToUpdate = {\r\n            name: this.state.ownerForm.name.value,\r\n            address: this.state.ownerForm.address.value,\r\n            dateOfBirth: this.state.ownerForm.dateOfBirth.value\r\n        }\r\n\r\n        const url = '/api/owner/' + this.props.data.id;\r\n        this.props.onUpdateOwner(url, ownerToUpdate, {...this.props});\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = formUtilityActions.convertStateToArrayOfFormObjects({ ...this.state.ownerForm });\r\n        return (\r\n            <Well>\r\n                <Form horizontal onSubmit={this.updateOwner}>\r\n                    {\r\n                        formElementsArray.map(element => {\r\n                            return <Input key={element.id} elementType={element.config.element}\r\n                                id={element.id} label={element.config.label}\r\n                                type={element.config.type} value={element.config.value}\r\n                                changed={(event) => this.handleChangeEvent(event, element.id)}\r\n                                errorMessage={element.config.errorMessage} invalid={!element.config.valid}\r\n                                shouldValidate={element.config.validation}\r\n                                touched={element.config.touched}\r\n                                blur={(event) => this.handleChangeEvent(event, element.id)} />\r\n                        })\r\n                    }\r\n                    <br />\r\n                    <FormGroup>\r\n                        <Col mdOffset={6} md={1}>\r\n                            <Button type='submit' bsStyle='info' disabled={!this.state.isFormValid}>Update</Button>\r\n                        </Col>\r\n                        <Col md={1}>\r\n                            <Button bsStyle='danger' onClick={this.redirectToOwnerList}>Cancel</Button>\r\n                        </Col>\r\n                    </FormGroup>\r\n                </Form>\r\n                <SuccessModal show={this.props.showSuccessModal} modalHeaderText={'Success message'}\r\n                    modalBodyText={'Action completed successfully'}\r\n                    okButtonText={'OK'}\r\n                    successClick={() => this.props.onCloseSuccessModal('/owner-List', { ...this.props })} />\r\n                <ErrorModal show={this.props.showErrorModal} modalHeaderText={'Error message'}\r\n                    modalBodyText={this.props.errorMessage}\r\n                    okButtonText={'OK'}\r\n                    closeModal={() => this.props.onCloseErrorModal()} />\r\n            </Well>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        data: state.repository.data,\r\n        showSuccessModal: state.repository.showSuccessModal,\r\n        showErrorModal: state.errorHandler.showErrorModal,\r\n        errorMessage: state.errorHandler.errorMessage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onGetOwnerById: (url, props) => dispatch(repositoryActions.getData(url, props)),\r\n        onUpdateOwner: (url, owner, props) => dispatch(repositoryActions.putData(url, owner, props)),\r\n        onCloseSuccessModal: (url, props) => dispatch(repositoryActions.closeSuccessModal(props, url)),\r\n        onCloseErrorModal: () => dispatch(errorHandlerActions.closeErrorModal())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateOwner);"],"sourceRoot":""}